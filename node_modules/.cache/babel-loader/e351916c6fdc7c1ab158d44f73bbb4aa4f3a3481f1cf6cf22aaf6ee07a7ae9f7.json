{"ast":null,"code":"const express = require(\"express\");\nconst axios = require(\"axios\");\nconst cors = require(\"cors\");\nconst http = require(\"http\");\nconst {\n  Server\n} = require(\"socket.io\");\nrequire(\"dotenv\").config();\nconst app = express();\nconst server = http.createServer(app); // Cria o servidor HTTP\nconst io = new Server(server, {\n  cors: {\n    origin: [\"http://localhost:3000\", \"https://your-production-frontend-url.com\"],\n    methods: [\"GET\", \"POST\"],\n    credentials: true\n  }\n});\n\n// Configurações de CORS\nconst corsOptions = {\n  origin: [\"http://localhost:3000\", \"https://your-production-frontend-url.com\"],\n  methods: [\"GET\", \"POST\", \"PUT\", \"DELETE\"],\n  allowedHeaders: [\"Content-Type\", \"Authorization\"],\n  credentials: true,\n  optionsSuccessStatus: 204\n};\napp.use(cors(corsOptions));\napp.use(express.json());\n\n// Configuração das variáveis de ambiente\nconst ASAAS_API_KEY = \"$aact_MzkwODA2MWY2OGM3MWRlMDU2NWM3MzJlNzZmNGZhZGY6OmZiYWI1NmI2LWY3MzktNDZiNC1hMGI5LWJmMTdlZDNmZDNmNzo6JGFhY2hfMDA4YjUyYWUtZDIwMS00MDMxLThhYzMtZTYwMzJmOTNkNzQ5\";\nconst ASAAS_API_URL = \"https://www.asaas.com/api/v3\";\nif (!ASAAS_API_KEY) {\n  console.error(\"ASAAS_API_KEY is not set in the environment variables\");\n  process.exit(1);\n}\nconsole.log(\"ASAAS_API_KEY:\", ASAAS_API_KEY ? `is set (length: ${ASAAS_API_KEY.length})` : \"is not set\");\nconsole.log(\"ASAAS_API_URL:\", ASAAS_API_URL);\n\n// Rota para criar um cliente no Asaas\nasync function createCustomerInAsaas(name, email, phone, cpfCnpj) {\n  try {\n    const response = await axios.post(`${ASAAS_API_URL}/customers`, {\n      name,\n      email,\n      phone,\n      mobilePhone: phone,\n      cpfCnpj\n    }, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        access_token: ASAAS_API_KEY\n      }\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response;\n    console.error(\"Error creating customer in Asaas:\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n    throw error;\n  }\n}\napp.post(\"/customers\", async (req, res) => {\n  try {\n    const {\n      name,\n      email,\n      phone,\n      cpfCnpj\n    } = req.body;\n    if (!name || !email || !phone || !cpfCnpj) {\n      return res.status(400).json({\n        error: \"Name, email, phone, and CPF/CNPJ are required.\"\n      });\n    }\n    const newCustomer = await createCustomerInAsaas(name, email, phone, cpfCnpj);\n    res.status(201).json(newCustomer);\n  } catch (error) {\n    var _error$response2;\n    console.error(\"Error creating customer:\", ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error.message);\n    if (error.response) {\n      res.status(error.response.status).json({\n        error: error.response.data.errors || \"Error creating customer\"\n      });\n    } else {\n      res.status(500).json({\n        error: \"Internal server error\"\n      });\n    }\n  }\n});\n\n// Rota para criar pagamentos no Asaas\napp.post(\"/payments\", async (req, res) => {\n  try {\n    const {\n      customer,\n      value,\n      dueDate,\n      description,\n      paymentMethod\n    } = req.body;\n    console.log(\"Payment request data:\", {\n      customer,\n      value,\n      dueDate,\n      description,\n      paymentMethod\n    });\n    if (!customer || !value || !dueDate || !description || !paymentMethod) {\n      return res.status(400).json({\n        error: \"Missing required payment information\",\n        details: {\n          customer,\n          value,\n          dueDate,\n          description,\n          paymentMethod\n        }\n      });\n    }\n    const paymentData = {\n      customer,\n      billingType: paymentMethod,\n      value: parseFloat(value).toFixed(2),\n      dueDate,\n      description,\n      postalService: false,\n      pixKey: \"vieira.cuio@gmail.com\"\n    };\n    console.log(\"Sending payment request to Asaas:\", paymentData);\n    const response = await axios.post(`${ASAAS_API_URL}/payments`, paymentData, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        access_token: ASAAS_API_KEY\n      }\n    });\n\n    // Adicione isso para retornar o pixCode\n    const pixCode = response.data.pixCode;\n    if (response.data.status === \"FAILED\") {\n      // Caso o pagamento tenha falhado, envia o erro\n      io.emit(\"paymentError\", {\n        message: \"Pagamento falhou. Tente novamente mais tarde.\",\n        paymentId: response.data.id,\n        status: \"failed\"\n      });\n      return res.status(400).json({\n        error: \"Pagamento falhou. Tente novamente mais tarde.\",\n        details: response.data\n      });\n    }\n    console.log(\"Asaas API response:\", response.data);\n    res.status(200).json({\n      message: \"Pagamento gerado com sucesso.\",\n      value: paymentData.value,\n      customer: paymentData.customer,\n      dueDate: paymentData.dueDate,\n      description: paymentData.description,\n      pixCode: pixCode // Adicione isso\n    });\n  } catch (error) {\n    console.error(\"Error generating payment:\", error);\n    io.emit(\"paymentError\", {\n      message: \"Erro ao gerar pagamento.\",\n      error: error.message,\n      status: \"failed\"\n    });\n    res.status(500).json({\n      error: \"Erro ao gerar pagamento\",\n      details: error.message\n    });\n  }\n});\n\n// Rota de webhook\napp.post(\"/webhook\", async (req, res) => {\n  try {\n    const {\n      event,\n      payment\n    } = req.body;\n    if (!event || !payment) {\n      console.error(\"Dados inválidos recebidos no webhook:\", req.body);\n      return res.status(400).send(\"Dados inválidos no webhook\");\n    }\n    if (event === \"PAYMENT_RECEIVED\") {\n      console.log(`Pagamento confirmado: ID=${payment.id}, Valor=${payment.value}, Cliente=${payment.customer}`);\n      io.emit(\"paymentReceived\", {\n        paymentId: payment.id,\n        value: payment.value,\n        customer: payment.customer,\n        status: \"confirmed\",\n        message: \"Pagamento confirmado com sucesso!\"\n      });\n      return res.status(200).send(\"Pagamento confirmado\");\n    }\n    if (event === \"PAYMENT_FAILED\") {\n      console.error(`Falha no pagamento: ID=${payment.id}, Valor=${payment.value}, Cliente=${payment.customer}`);\n      io.emit(\"paymentError\", {\n        paymentId: payment.id,\n        value: payment.value,\n        customer: payment.customer,\n        status: \"failed\",\n        message: \"Falha no pagamento. Tente novamente.\"\n      });\n      return res.status(200).send(\"Erro no pagamento\");\n    }\n    console.log(`Evento não reconhecido: ${event}`);\n    res.status(200).send(\"Evento recebido\");\n  } catch (error) {\n    console.error(\"Erro no processamento do webhook:\", error.message);\n    res.status(500).send(\"Erro interno no webhook\");\n  }\n});\n\n// Configuração do Socket.IO\nlet connectedClientId = null;\nio.on(\"connection\", socket => {\n  console.log(\"Novo cliente conectado:\", socket.id);\n\n  // Verifica se o cliente já está conectado, evitando múltiplas conexões\n  socket.on(\"join\", clientId => {\n    if (connectedClientId !== clientId) {\n      console.log(`Cliente ${clientId} está tentando se conectar. Redirecionando...`);\n      socket.emit(\"clientAlreadyConnected\", {\n        message: \"Você já está conectado!\"\n      });\n    } else {\n      console.log(`Cliente ${clientId} conectado com sucesso.`);\n      connectedClientId = clientId; // Armazena o ID do cliente\n    }\n  });\n\n  // Enviar um evento de pagamento recebido para o cliente\n  socket.on(\"paymentReceived\", paymentDetails => {\n    console.log(\"Pagamento recebido:\", paymentDetails);\n    io.emit(\"paymentReceived\", paymentDetails); // Emite o evento para todos os clientes conectados\n  });\n\n  // Escutando o evento de desconexão\n  socket.on(\"disconnect\", () => {\n    console.log(\"Cliente desconectado:\", socket.id);\n    connectedClientId = null; // Limpa a referência do cliente desconectado\n  });\n});\n\n// Inicializando o servidor\nconst PORT = process.env.PORT || 5000;\nserver.listen(PORT, () => {\n  console.log(`Server running on port ${PORT}`);\n});","map":{"version":3,"names":["express","require","axios","cors","http","Server","config","app","server","createServer","io","origin","methods","credentials","corsOptions","allowedHeaders","optionsSuccessStatus","use","json","ASAAS_API_KEY","ASAAS_API_URL","console","error","process","exit","log","length","createCustomerInAsaas","name","email","phone","cpfCnpj","response","post","mobilePhone","headers","access_token","data","_error$response","message","req","res","body","status","newCustomer","_error$response2","errors","customer","value","dueDate","description","paymentMethod","details","paymentData","billingType","parseFloat","toFixed","postalService","pixKey","pixCode","emit","paymentId","id","event","payment","send","connectedClientId","on","socket","clientId","paymentDetails","PORT","env","listen"],"sources":["C:/Users/caioc/Downloads/AsaasFront/src/componentes/payment/payment.jsx"],"sourcesContent":["const express = require(\"express\");\r\nconst axios = require(\"axios\");\r\nconst cors = require(\"cors\");\r\nconst http = require(\"http\");\r\nconst { Server } = require(\"socket.io\");\r\nrequire(\"dotenv\").config();\r\n\r\nconst app = express();\r\nconst server = http.createServer(app); // Cria o servidor HTTP\r\nconst io = new Server(server, {\r\n  cors: {\r\n    origin: [\"http://localhost:3000\", \"https://your-production-frontend-url.com\"],\r\n    methods: [\"GET\", \"POST\"],\r\n    credentials: true,\r\n  },\r\n});\r\n\r\n// Configurações de CORS\r\nconst corsOptions = {\r\n  origin: [\"http://localhost:3000\", \"https://your-production-frontend-url.com\"],\r\n  methods: [\"GET\", \"POST\", \"PUT\", \"DELETE\"],\r\n  allowedHeaders: [\"Content-Type\", \"Authorization\"],\r\n  credentials: true,\r\n  optionsSuccessStatus: 204,\r\n};\r\n\r\napp.use(cors(corsOptions));\r\napp.use(express.json());\r\n\r\n// Configuração das variáveis de ambiente\r\nconst ASAAS_API_KEY = \"$aact_MzkwODA2MWY2OGM3MWRlMDU2NWM3MzJlNzZmNGZhZGY6OmZiYWI1NmI2LWY3MzktNDZiNC1hMGI5LWJmMTdlZDNmZDNmNzo6JGFhY2hfMDA4YjUyYWUtZDIwMS00MDMxLThhYzMtZTYwMzJmOTNkNzQ5\";\r\nconst ASAAS_API_URL = \"https://www.asaas.com/api/v3\";\r\n\r\nif (!ASAAS_API_KEY) {\r\n  console.error(\"ASAAS_API_KEY is not set in the environment variables\");\r\n  process.exit(1);\r\n}\r\n\r\nconsole.log(\"ASAAS_API_KEY:\", ASAAS_API_KEY ? `is set (length: ${ASAAS_API_KEY.length})` : \"is not set\");\r\nconsole.log(\"ASAAS_API_URL:\", ASAAS_API_URL);\r\n\r\n// Rota para criar um cliente no Asaas\r\nasync function createCustomerInAsaas(name, email, phone, cpfCnpj) {\r\n  try {\r\n    const response = await axios.post(\r\n      `${ASAAS_API_URL}/customers`,\r\n      { name, email, phone, mobilePhone: phone, cpfCnpj },\r\n      {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          access_token: ASAAS_API_KEY,\r\n        },\r\n      }\r\n    );\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error creating customer in Asaas:\", error.response?.data || error.message);\r\n    throw error;\r\n  }\r\n}\r\n\r\napp.post(\"/customers\", async (req, res) => {\r\n  try {\r\n    const { name, email, phone, cpfCnpj } = req.body;\r\n    if (!name || !email || !phone || !cpfCnpj) {\r\n      return res.status(400).json({ error: \"Name, email, phone, and CPF/CNPJ are required.\" });\r\n    }\r\n\r\n    const newCustomer = await createCustomerInAsaas(name, email, phone, cpfCnpj);\r\n    res.status(201).json(newCustomer);\r\n  } catch (error) {\r\n    console.error(\"Error creating customer:\", error.response?.data || error.message);\r\n    if (error.response) {\r\n      res.status(error.response.status).json({ error: error.response.data.errors || \"Error creating customer\" });\r\n    } else {\r\n      res.status(500).json({ error: \"Internal server error\" });\r\n    }\r\n  }\r\n});\r\n\r\n// Rota para criar pagamentos no Asaas\r\napp.post(\"/payments\", async (req, res) => {\r\n  try {\r\n    const { customer, value, dueDate, description, paymentMethod } = req.body;\r\n    console.log(\"Payment request data:\", { customer, value, dueDate, description, paymentMethod });\r\n\r\n    if (!customer || !value || !dueDate || !description || !paymentMethod) {\r\n      return res.status(400).json({\r\n        error: \"Missing required payment information\",\r\n        details: { customer, value, dueDate, description, paymentMethod },\r\n      });\r\n    }\r\n\r\n    const paymentData = {\r\n      customer,\r\n      billingType: paymentMethod,\r\n      value: parseFloat(value).toFixed(2),\r\n      dueDate,\r\n      description,\r\n      postalService: false,\r\n      pixKey: \"vieira.cuio@gmail.com\",\r\n    };\r\n\r\n    console.log(\"Sending payment request to Asaas:\", paymentData);\r\n\r\n    const response = await axios.post(`${ASAAS_API_URL}/payments`, paymentData, {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        access_token: ASAAS_API_KEY,\r\n      },\r\n    });\r\n\r\n    // Adicione isso para retornar o pixCode\r\n    const pixCode = response.data.pixCode;\r\n\r\n    if (response.data.status === \"FAILED\") {\r\n      // Caso o pagamento tenha falhado, envia o erro\r\n      io.emit(\"paymentError\", {\r\n        message: \"Pagamento falhou. Tente novamente mais tarde.\",\r\n        paymentId: response.data.id,\r\n        status: \"failed\",\r\n      });\r\n      return res.status(400).json({\r\n        error: \"Pagamento falhou. Tente novamente mais tarde.\",\r\n        details: response.data,\r\n      });\r\n    }\r\n\r\n    console.log(\"Asaas API response:\", response.data);\r\n    res.status(200).json({\r\n      message: \"Pagamento gerado com sucesso.\",\r\n      value: paymentData.value,\r\n      customer: paymentData.customer,\r\n      dueDate: paymentData.dueDate,\r\n      description: paymentData.description,\r\n      pixCode: pixCode, // Adicione isso\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error generating payment:\", error);\r\n    io.emit(\"paymentError\", {\r\n      message: \"Erro ao gerar pagamento.\",\r\n      error: error.message,\r\n      status: \"failed\",\r\n    });\r\n    res.status(500).json({ error: \"Erro ao gerar pagamento\", details: error.message });\r\n  }\r\n});\r\n\r\n// Rota de webhook\r\napp.post(\"/webhook\", async (req, res) => {\r\n  try {\r\n    const { event, payment } = req.body;\r\n\r\n    if (!event || !payment) {\r\n      console.error(\"Dados inválidos recebidos no webhook:\", req.body);\r\n      return res.status(400).send(\"Dados inválidos no webhook\");\r\n    }\r\n\r\n    if (event === \"PAYMENT_RECEIVED\") {\r\n      console.log(`Pagamento confirmado: ID=${payment.id}, Valor=${payment.value}, Cliente=${payment.customer}`);      \r\n\r\n      io.emit(\"paymentReceived\", {\r\n        paymentId: payment.id,\r\n        value: payment.value,\r\n        customer: payment.customer,\r\n        status: \"confirmed\",\r\n        message: \"Pagamento confirmado com sucesso!\",\r\n      });\r\n\r\n      return res.status(200).send(\"Pagamento confirmado\");\r\n    }\r\n\r\n    if (event === \"PAYMENT_FAILED\") {\r\n      console.error(`Falha no pagamento: ID=${payment.id}, Valor=${payment.value}, Cliente=${payment.customer}`);\r\n\r\n      io.emit(\"paymentError\", {\r\n        paymentId: payment.id,\r\n        value: payment.value,\r\n        customer: payment.customer,\r\n        status: \"failed\",\r\n        message: \"Falha no pagamento. Tente novamente.\",\r\n      });\r\n\r\n      return res.status(200).send(\"Erro no pagamento\");\r\n    }\r\n\r\n    console.log(`Evento não reconhecido: ${event}`);\r\n    res.status(200).send(\"Evento recebido\");\r\n  } catch (error) {\r\n    console.error(\"Erro no processamento do webhook:\", error.message);\r\n    res.status(500).send(\"Erro interno no webhook\");\r\n  }\r\n});\r\n\r\n\r\n// Configuração do Socket.IO\r\nlet connectedClientId = null;\r\n\r\nio.on(\"connection\", (socket) => {\r\n  console.log(\"Novo cliente conectado:\", socket.id);\r\n\r\n  // Verifica se o cliente já está conectado, evitando múltiplas conexões\r\n  socket.on(\"join\", (clientId) => {\r\n    if (connectedClientId !== clientId) {\r\n      console.log(`Cliente ${clientId} está tentando se conectar. Redirecionando...`);\r\n      socket.emit(\"clientAlreadyConnected\", { message: \"Você já está conectado!\" });\r\n    } else {\r\n      console.log(`Cliente ${clientId} conectado com sucesso.`);\r\n      connectedClientId = clientId; // Armazena o ID do cliente\r\n    }\r\n  });\r\n\r\n  // Enviar um evento de pagamento recebido para o cliente\r\n  socket.on(\"paymentReceived\", (paymentDetails) => {\r\n    console.log(\"Pagamento recebido:\", paymentDetails);\r\n    io.emit(\"paymentReceived\", paymentDetails); // Emite o evento para todos os clientes conectados\r\n  });\r\n\r\n  // Escutando o evento de desconexão\r\n  socket.on(\"disconnect\", () => {\r\n    console.log(\"Cliente desconectado:\", socket.id);\r\n    connectedClientId = null; // Limpa a referência do cliente desconectado\r\n  });\r\n});\r\n\r\n// Inicializando o servidor\r\nconst PORT = process.env.PORT || 5000;\r\nserver.listen(PORT, () => {\r\n  console.log(`Server running on port ${PORT}`);\r\n});\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
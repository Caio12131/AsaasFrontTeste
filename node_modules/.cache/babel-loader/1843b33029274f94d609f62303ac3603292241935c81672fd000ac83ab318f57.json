{"ast":null,"code":"const express = require(\"express\");\nconst axios = require(\"axios\");\nconst cors = require(\"cors\");\nconst http = require(\"http\");\nconst {\n  Server\n} = require(\"socket.io\");\nrequire(\"dotenv\").config();\nconst app = express();\nconst server = http.createServer(app); // Cria o servidor HTTP\nconst io = new Server(server, {\n  cors: {\n    origin: [\"http://localhost:3000\", \"https://your-production-frontend-url.com\"],\n    methods: [\"GET\", \"POST\"],\n    credentials: true\n  }\n});\n\n// Configurações de CORS\nconst corsOptions = {\n  origin: [\"http://localhost:3000\", \"https://your-production-frontend-url.com\"],\n  methods: [\"GET\", \"POST\", \"PUT\", \"DELETE\"],\n  allowedHeaders: [\"Content-Type\", \"Authorization\"],\n  credentials: true,\n  optionsSuccessStatus: 204\n};\napp.use(cors(corsOptions));\napp.use(express.json());\n\n// Configuração das variáveis de ambiente\nconst ASAAS_API_KEY = \"$aact_MzkwODA2MWY2OGM3MWRlMDU2NWM3MzJlNzZmNGZhZGY6OmY3ODZiMjc2LTlmNzctNGUzYi04MWVjLWRmZTI2NTRiYTM5Mzo6JGFhY2hfNTM0OTQxZWMtY2Q4My00Mjk2LWE0OWUtMDQxMjAxMjBiYmQ1\";\nconst ASAAS_API_URL = \"https://www.asaas.com/api/v3\";\nif (!ASAAS_API_KEY) {\n  console.error(\"ASAAS_API_KEY is not set in the environment variables\");\n  process.exit(1);\n}\nconsole.log(\"ASAAS_API_KEY:\", ASAAS_API_KEY ? `is set (length: ${ASAAS_API_KEY.length})` : \"is not set\");\nconsole.log(\"ASAAS_API_URL:\", ASAAS_API_URL);\n\n// Rota para criar um cliente no Asaas\nasync function createCustomerInAsaas(name, email, phone, cpfCnpj) {\n  try {\n    const response = await axios.post(`${ASAAS_API_URL}/customers`, {\n      name,\n      email,\n      phone,\n      mobilePhone: phone,\n      cpfCnpj\n    }, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        access_token: ASAAS_API_KEY\n      }\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response;\n    console.error(\"Error creating customer in Asaas:\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n    throw error;\n  }\n}\napp.post(\"/customers\", async (req, res) => {\n  try {\n    const {\n      name,\n      email,\n      phone,\n      cpfCnpj\n    } = req.body;\n    if (!name || !email || !phone || !cpfCnpj) {\n      return res.status(400).json({\n        error: \"Name, email, phone, and CPF/CNPJ are required.\"\n      });\n    }\n    const newCustomer = await createCustomerInAsaas(name, email, phone, cpfCnpj);\n    res.status(201).json(newCustomer);\n  } catch (error) {\n    var _error$response2;\n    console.error(\"Error creating customer:\", ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error.message);\n    if (error.response) {\n      res.status(error.response.status).json({\n        error: error.response.data.errors || \"Error creating customer\"\n      });\n    } else {\n      res.status(500).json({\n        error: \"Internal server error\"\n      });\n    }\n  }\n});\n\n// Rota para criar pagamentos no Asaas\napp.post(\"/payments\", async (req, res) => {\n  try {\n    const {\n      customer,\n      value,\n      dueDate,\n      description,\n      paymentMethod\n    } = req.body;\n    console.log(\"Payment request data:\", {\n      customer,\n      value,\n      dueDate,\n      description,\n      paymentMethod\n    });\n    if (!customer || !value || !dueDate || !description || !paymentMethod) {\n      return res.status(400).json({\n        error: \"Missing required payment information\",\n        details: {\n          customer,\n          value,\n          dueDate,\n          description,\n          paymentMethod\n        }\n      });\n    }\n    const paymentData = {\n      customer,\n      billingType: paymentMethod,\n      value: parseFloat(value).toFixed(2),\n      dueDate,\n      description,\n      postalService: false\n    };\n    console.log(\"Sending payment request to Asaas:\", paymentData);\n    const response = await axios.post(`${ASAAS_API_URL}/payments`, paymentData, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        access_token: ASAAS_API_KEY\n      }\n    });\n    console.log(\"Asaas API response:\", response.data);\n\n    // Gerar o QR code PIX\n    if (paymentMethod === 'PIX') {\n      const pixResponse = await axios.get(`${ASAAS_API_URL}/payments/${response.data.id}/pixQrCode`, {\n        headers: {\n          access_token: ASAAS_API_KEY\n        }\n      });\n      console.log(\"PIX QR Code response:\", pixResponse.data);\n      res.status(201).json({\n        ...response.data,\n        encodedImage: pixResponse.data.encodedImage,\n        payload: pixResponse.data.payload\n      });\n    } else {\n      res.status(201).json(response.data);\n    }\n  } catch (error) {\n    var _error$response3;\n    console.error(\"Error creating payment:\", ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || error.message);\n    if (error.response) {\n      res.status(error.response.status).json({\n        error: error.response.data.errors || \"Error creating payment\"\n      });\n    } else {\n      res.status(500).json({\n        error: \"Error creating payment\",\n        details: error.message\n      });\n    }\n  }\n});\n\n// Rota de webhook\napp.post(\"/webhook\", async (req, res) => {\n  try {\n    const {\n      event,\n      payment\n    } = req.body;\n    if (event === \"PAYMENT_RECEIVED\") {\n      console.log(`Pagamento confirmado: ${payment.id}`);\n\n      // Emite o evento para todos os clientes conectados\n      io.emit(\"paymentReceived\", {\n        paymentId: payment.id,\n        status: \"confirmed\"\n      });\n      return res.status(200).send(\"Pagamento confirmado\");\n    }\n    console.log(`Evento recebido: ${event}`);\n    res.status(200).send(\"Evento recebido\");\n  } catch (error) {\n    console.error(\"Erro no webhook:\", error.message);\n    res.status(500).send(\"Erro no webhook\");\n  }\n});\n\n// Configuração do Socket.IO\nio.on(\"connection\", socket => {\n  console.log(\"Novo cliente conectado:\", socket.id);\n\n  // Escutando eventos do cliente\n  socket.on(\"disconnect\", () => {\n    console.log(\"Cliente desconectado:\", socket.id);\n  });\n});\n\n// Inicializando o servidor\nconst PORT = process.env.PORT || 5000;\nserver.listen(PORT, () => {\n  console.log(`Server running on port ${PORT}`);\n});","map":{"version":3,"names":["express","require","axios","cors","http","Server","config","app","server","createServer","io","origin","methods","credentials","corsOptions","allowedHeaders","optionsSuccessStatus","use","json","ASAAS_API_KEY","ASAAS_API_URL","console","error","process","exit","log","length","createCustomerInAsaas","name","email","phone","cpfCnpj","response","post","mobilePhone","headers","access_token","data","_error$response","message","req","res","body","status","newCustomer","_error$response2","errors","customer","value","dueDate","description","paymentMethod","details","paymentData","billingType","parseFloat","toFixed","postalService","pixResponse","get","id","encodedImage","payload","_error$response3","event","payment","emit","paymentId","send","on","socket","PORT","env","listen"],"sources":["C:/Users/caioc/Downloads/AsaasFront/src/componentes/payment/payment.jsx"],"sourcesContent":["const express = require(\"express\");\r\nconst axios = require(\"axios\");\r\nconst cors = require(\"cors\");\r\nconst http = require(\"http\");\r\nconst { Server } = require(\"socket.io\");\r\nrequire(\"dotenv\").config();\r\n\r\nconst app = express();\r\nconst server = http.createServer(app); // Cria o servidor HTTP\r\nconst io = new Server(server, {\r\n  cors: {\r\n    origin: [\"http://localhost:3000\", \"https://your-production-frontend-url.com\"],\r\n    methods: [\"GET\", \"POST\"],\r\n    credentials: true,\r\n  },\r\n});\r\n\r\n// Configurações de CORS\r\nconst corsOptions = {\r\n  origin: [\"http://localhost:3000\", \"https://your-production-frontend-url.com\"],\r\n  methods: [\"GET\", \"POST\", \"PUT\", \"DELETE\"],\r\n  allowedHeaders: [\"Content-Type\", \"Authorization\"],\r\n  credentials: true,\r\n  optionsSuccessStatus: 204,\r\n};\r\n\r\napp.use(cors(corsOptions));\r\napp.use(express.json());\r\n\r\n// Configuração das variáveis de ambiente\r\nconst ASAAS_API_KEY = \"$aact_MzkwODA2MWY2OGM3MWRlMDU2NWM3MzJlNzZmNGZhZGY6OmY3ODZiMjc2LTlmNzctNGUzYi04MWVjLWRmZTI2NTRiYTM5Mzo6JGFhY2hfNTM0OTQxZWMtY2Q4My00Mjk2LWE0OWUtMDQxMjAxMjBiYmQ1\";\r\nconst ASAAS_API_URL = \"https://www.asaas.com/api/v3\";\r\n\r\nif (!ASAAS_API_KEY) {\r\n  console.error(\"ASAAS_API_KEY is not set in the environment variables\");\r\n  process.exit(1);\r\n}\r\n\r\nconsole.log(\"ASAAS_API_KEY:\", ASAAS_API_KEY ? `is set (length: ${ASAAS_API_KEY.length})` : \"is not set\");\r\nconsole.log(\"ASAAS_API_URL:\", ASAAS_API_URL);\r\n\r\n// Rota para criar um cliente no Asaas\r\nasync function createCustomerInAsaas(name, email, phone, cpfCnpj) {\r\n  try {\r\n    const response = await axios.post(\r\n      `${ASAAS_API_URL}/customers`,\r\n      { name, email, phone, mobilePhone: phone, cpfCnpj },\r\n      {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          access_token: ASAAS_API_KEY,\r\n        },\r\n      }\r\n    );\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error creating customer in Asaas:\", error.response?.data || error.message);\r\n    throw error;\r\n  }\r\n}\r\n\r\napp.post(\"/customers\", async (req, res) => {\r\n  try {\r\n    const { name, email, phone, cpfCnpj } = req.body;\r\n    if (!name || !email || !phone || !cpfCnpj) {\r\n      return res.status(400).json({ error: \"Name, email, phone, and CPF/CNPJ are required.\" });\r\n    }\r\n\r\n    const newCustomer = await createCustomerInAsaas(name, email, phone, cpfCnpj);\r\n    res.status(201).json(newCustomer);\r\n  } catch (error) {\r\n    console.error(\"Error creating customer:\", error.response?.data || error.message);\r\n    if (error.response) {\r\n      res.status(error.response.status).json({ error: error.response.data.errors || \"Error creating customer\" });\r\n    } else {\r\n      res.status(500).json({ error: \"Internal server error\" });\r\n    }\r\n  }\r\n});\r\n\r\n// Rota para criar pagamentos no Asaas\r\napp.post(\"/payments\", async (req, res) => {\r\n  try {\r\n    const { customer, value, dueDate, description, paymentMethod } = req.body;\r\n    console.log(\"Payment request data:\", { customer, value, dueDate, description, paymentMethod });\r\n\r\n    if (!customer || !value || !dueDate || !description || !paymentMethod) {\r\n      return res.status(400).json({\r\n        error: \"Missing required payment information\",\r\n        details: { customer, value, dueDate, description, paymentMethod },\r\n      });\r\n    }\r\n\r\n    const paymentData = {\r\n      customer,\r\n      billingType: paymentMethod,\r\n      value: parseFloat(value).toFixed(2),\r\n      dueDate,\r\n      description,\r\n      postalService: false,\r\n    };\r\n\r\n    console.log(\"Sending payment request to Asaas:\", paymentData);\r\n\r\n    const response = await axios.post(`${ASAAS_API_URL}/payments`, paymentData, {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        access_token: ASAAS_API_KEY,\r\n      },\r\n    });\r\n\r\n    console.log(\"Asaas API response:\", response.data);\r\n\r\n    // Gerar o QR code PIX\r\n    if (paymentMethod === 'PIX') {\r\n      const pixResponse = await axios.get(`${ASAAS_API_URL}/payments/${response.data.id}/pixQrCode`, {\r\n        headers: {\r\n          access_token: ASAAS_API_KEY,\r\n        },\r\n      });\r\n\r\n      console.log(\"PIX QR Code response:\", pixResponse.data);\r\n\r\n      res.status(201).json({\r\n        ...response.data,\r\n        encodedImage: pixResponse.data.encodedImage,\r\n        payload: pixResponse.data.payload,\r\n      });\r\n    } else {\r\n      res.status(201).json(response.data);\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error creating payment:\", error.response?.data || error.message);\r\n    if (error.response) {\r\n      res.status(error.response.status).json({ error: error.response.data.errors || \"Error creating payment\" });\r\n    } else {\r\n      res.status(500).json({ error: \"Error creating payment\", details: error.message });\r\n    }\r\n  }\r\n});\r\n\r\n// Rota de webhook\r\napp.post(\"/webhook\", async (req, res) => {\r\n  try {\r\n    const { event, payment } = req.body;\r\n\r\n    if (event === \"PAYMENT_RECEIVED\") {\r\n      console.log(`Pagamento confirmado: ${payment.id}`);\r\n      \r\n      // Emite o evento para todos os clientes conectados\r\n      io.emit(\"paymentReceived\", { paymentId: payment.id, status: \"confirmed\" });\r\n\r\n      return res.status(200).send(\"Pagamento confirmado\");\r\n    }\r\n\r\n    console.log(`Evento recebido: ${event}`);\r\n    res.status(200).send(\"Evento recebido\");\r\n  } catch (error) {\r\n    console.error(\"Erro no webhook:\", error.message);\r\n    res.status(500).send(\"Erro no webhook\");\r\n  }\r\n});\r\n\r\n// Configuração do Socket.IO\r\nio.on(\"connection\", (socket) => {\r\n  console.log(\"Novo cliente conectado:\", socket.id);\r\n\r\n  // Escutando eventos do cliente\r\n  socket.on(\"disconnect\", () => {\r\n    console.log(\"Cliente desconectado:\", socket.id);\r\n  });\r\n});\r\n\r\n// Inicializando o servidor\r\nconst PORT = process.env.PORT || 5000;\r\nserver.listen(PORT, () => {\r\n  console.log(`Server running on port ${PORT}`);\r\n});\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}